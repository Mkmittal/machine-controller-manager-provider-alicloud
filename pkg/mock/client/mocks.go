// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/spi/spi.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	api "github.com/gardener/machine-controller-manager-provider-alicloud/pkg/alicloud/apis"
	spi "github.com/gardener/machine-controller-manager-provider-alicloud/pkg/spi"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockECSClient is a mock of ECSClient interface.
type MockECSClient struct {
	ctrl     *gomock.Controller
	recorder *MockECSClientMockRecorder
}

// MockECSClientMockRecorder is the mock recorder for MockECSClient.
type MockECSClientMockRecorder struct {
	mock *MockECSClient
}

// NewMockECSClient creates a new mock instance.
func NewMockECSClient(ctrl *gomock.Controller) *MockECSClient {
	mock := &MockECSClient{ctrl: ctrl}
	mock.recorder = &MockECSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSClient) EXPECT() *MockECSClientMockRecorder {
	return m.recorder
}

// DeleteDisk mocks base method.
func (m *MockECSClient) DeleteDisk(request *ecs.DeleteDiskRequest) (*ecs.DeleteDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", request)
	ret0, _ := ret[0].(*ecs.DeleteDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDisk indicates an expected call of DeleteDisk.
func (mr *MockECSClientMockRecorder) DeleteDisk(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockECSClient)(nil).DeleteDisk), request)
}

// DeleteInstance mocks base method.
func (m *MockECSClient) DeleteInstance(request *ecs.DeleteInstanceRequest) (*ecs.DeleteInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", request)
	ret0, _ := ret[0].(*ecs.DeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockECSClientMockRecorder) DeleteInstance(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockECSClient)(nil).DeleteInstance), request)
}

// DeleteNetworkInterface mocks base method.
func (m *MockECSClient) DeleteNetworkInterface(request *ecs.DeleteNetworkInterfaceRequest) (*ecs.DeleteNetworkInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkInterface", request)
	ret0, _ := ret[0].(*ecs.DeleteNetworkInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkInterface indicates an expected call of DeleteNetworkInterface.
func (mr *MockECSClientMockRecorder) DeleteNetworkInterface(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkInterface", reflect.TypeOf((*MockECSClient)(nil).DeleteNetworkInterface), request)
}

// DescribeDisks mocks base method.
func (m *MockECSClient) DescribeDisks(request *ecs.DescribeDisksRequest) (*ecs.DescribeDisksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDisks", request)
	ret0, _ := ret[0].(*ecs.DescribeDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDisks indicates an expected call of DescribeDisks.
func (mr *MockECSClientMockRecorder) DescribeDisks(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDisks", reflect.TypeOf((*MockECSClient)(nil).DescribeDisks), request)
}

// DescribeInstances mocks base method.
func (m *MockECSClient) DescribeInstances(request *ecs.DescribeInstancesRequest) (*ecs.DescribeInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstances", request)
	ret0, _ := ret[0].(*ecs.DescribeInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockECSClientMockRecorder) DescribeInstances(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockECSClient)(nil).DescribeInstances), request)
}

// DescribeNetworkInterfaces mocks base method.
func (m *MockECSClient) DescribeNetworkInterfaces(request *ecs.DescribeNetworkInterfacesRequest) (*ecs.DescribeNetworkInterfacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNetworkInterfaces", request)
	ret0, _ := ret[0].(*ecs.DescribeNetworkInterfacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInterfaces indicates an expected call of DescribeNetworkInterfaces.
func (mr *MockECSClientMockRecorder) DescribeNetworkInterfaces(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInterfaces", reflect.TypeOf((*MockECSClient)(nil).DescribeNetworkInterfaces), request)
}

// RunInstances mocks base method.
func (m *MockECSClient) RunInstances(request *ecs.RunInstancesRequest) (*ecs.RunInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInstances", request)
	ret0, _ := ret[0].(*ecs.RunInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstances indicates an expected call of RunInstances.
func (mr *MockECSClientMockRecorder) RunInstances(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstances", reflect.TypeOf((*MockECSClient)(nil).RunInstances), request)
}

// MockPluginSPI is a mock of PluginSPI interface.
type MockPluginSPI struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSPIMockRecorder
}

// MockPluginSPIMockRecorder is the mock recorder for MockPluginSPI.
type MockPluginSPIMockRecorder struct {
	mock *MockPluginSPI
}

// NewMockPluginSPI creates a new mock instance.
func NewMockPluginSPI(ctrl *gomock.Controller) *MockPluginSPI {
	mock := &MockPluginSPI{ctrl: ctrl}
	mock.recorder = &MockPluginSPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginSPI) EXPECT() *MockPluginSPIMockRecorder {
	return m.recorder
}

// NewDeleteInstanceRequest mocks base method.
func (m *MockPluginSPI) NewDeleteInstanceRequest(instanceID string, force bool) (*ecs.DeleteInstanceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteInstanceRequest", instanceID, force)
	ret0, _ := ret[0].(*ecs.DeleteInstanceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDeleteInstanceRequest indicates an expected call of NewDeleteInstanceRequest.
func (mr *MockPluginSPIMockRecorder) NewDeleteInstanceRequest(instanceID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteInstanceRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewDeleteInstanceRequest), instanceID, force)
}

// NewDescribeInstancesRequest mocks base method.
func (m *MockPluginSPI) NewDescribeInstancesRequest(machineName, instanceID string, tags map[string]string) (*ecs.DescribeInstancesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDescribeInstancesRequest", machineName, instanceID, tags)
	ret0, _ := ret[0].(*ecs.DescribeInstancesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDescribeInstancesRequest indicates an expected call of NewDescribeInstancesRequest.
func (mr *MockPluginSPIMockRecorder) NewDescribeInstancesRequest(machineName, instanceID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeInstancesRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewDescribeInstancesRequest), machineName, instanceID, tags)
}

// NewECSClient mocks base method.
func (m *MockPluginSPI) NewECSClient(secret *v1.Secret, region string) (spi.ECSClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewECSClient", secret, region)
	ret0, _ := ret[0].(spi.ECSClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewECSClient indicates an expected call of NewECSClient.
func (mr *MockPluginSPIMockRecorder) NewECSClient(secret, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewECSClient", reflect.TypeOf((*MockPluginSPI)(nil).NewECSClient), secret, region)
}

// NewInstanceDataDisks mocks base method.
func (m *MockPluginSPI) NewInstanceDataDisks(disks []api.AlicloudDataDisk, machineName string) []ecs.RunInstancesDataDisk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstanceDataDisks", disks, machineName)
	ret0, _ := ret[0].([]ecs.RunInstancesDataDisk)
	return ret0
}

// NewInstanceDataDisks indicates an expected call of NewInstanceDataDisks.
func (mr *MockPluginSPIMockRecorder) NewInstanceDataDisks(disks, machineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstanceDataDisks", reflect.TypeOf((*MockPluginSPI)(nil).NewInstanceDataDisks), disks, machineName)
}

// NewRunInstanceTags mocks base method.
func (m *MockPluginSPI) NewRunInstanceTags(tags map[string]string) ([]ecs.RunInstancesTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRunInstanceTags", tags)
	ret0, _ := ret[0].([]ecs.RunInstancesTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRunInstanceTags indicates an expected call of NewRunInstanceTags.
func (mr *MockPluginSPIMockRecorder) NewRunInstanceTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRunInstanceTags", reflect.TypeOf((*MockPluginSPI)(nil).NewRunInstanceTags), tags)
}

// NewRunInstancesRequest mocks base method.
func (m *MockPluginSPI) NewRunInstancesRequest(providerSpec *api.ProviderSpec, machineName string, userData []byte) (*ecs.RunInstancesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRunInstancesRequest", providerSpec, machineName, userData)
	ret0, _ := ret[0].(*ecs.RunInstancesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRunInstancesRequest indicates an expected call of NewRunInstancesRequest.
func (mr *MockPluginSPIMockRecorder) NewRunInstancesRequest(providerSpec, machineName, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRunInstancesRequest", reflect.TypeOf((*MockPluginSPI)(nil).NewRunInstancesRequest), providerSpec, machineName, userData)
}
